{"version":3,"sources":["ListItem.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","venue","venueName","name","react_default","a","createElement","className","aria-label","tabIndex","role","onClick","place","window","google","maps","event","trigger","marker","handleItemClick","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","errorInfo","error","info","setState","children","Component","gm_authFailure","alert","App","venues","query","renderMap","url","index","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","loadScript","initMap","err","console","getVenues","axios","get","URLSearchParams","client_id","client_secret","near","v","then","response","data","groups","items","catch","markersArr","scaledSize","Size","redMarker","greenMarker","map","Map","getElementById","center","lat","lng","zoom","infowindow","InfoWindow","myVenue","address","location","contentString","concat","city","postalCode","id","Marker","position","title","animation","Animation","DROP","isOpen","push","addListener","setContent","log","forEach","setIcon","setZIndex","open","close","preventDefault","menuOpen","trim","toLowerCase","includes","setVisible","filteredVenues","_this2","_this$state","match","RegExp","escapeRegExp","filter","isMatch","test","setMap","ErrorBoundary_ErrorBoundary","BurgerMenu","type","placeholder","onChange","updateQuery","target","value","src_ListItem","key","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.612fa9e8.chunk.js","sourcesContent":["import React from 'react';\n//import { push as Menu } from 'react-burger-menu'\n\n\n\n\nconst ListItem = (venue) => {\n\tconst handleItemClick = () => {\n        const place = venue.venue;\n        //console.log(place.marker);/**/\n       /* let icon = place.marker.getIcon();\n        if (icon === undefined || (icon !== undefined && icon.indexOf('marker_green') === -1)) {\n            place.marker.setIcon('https://www.google.com/mapfiles/marker_green.png');\n        } else {\n            place.marker.setIcon('https://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n        }*/\n        window.google.maps.event.trigger(place.marker, \"click\")\n    }\n\n    const venueName = venue.venue.venue.name;\n    //const handleItemClick = venue;\n\n    \n\n\n\n\treturn (\n\n\t\t\n\n\t\t<ol className =\"venueList\" aria-label = \"Ordered List of Venues\">\n\t\t<li className=\"venueList\" aria-label = {venue.venue.name} tabIndex=\"0\" role=\"link\" onClick= {() => {\n\t\t\thandleItemClick()\n\t\t}\n\t}\n\t\t>{venueName}</li>\n\t\t</ol>\n\n\t\t\n\t\t\n\t\t);\n}\n\nexport default ListItem;","//Component based on the ErrorBoundary example code in the \n//React documentation:https://reactjs.org/docs/error-boundary\n\n//import { Component } from 'react';\n\n//import { push as Menu } from 'react-burger-menu'\n\n\n\n\nimport React, { Component } from 'react'\n\nexport default class ErrorBoundary extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false, errorInfo: null };\n    }\n  \n    componentDidCatch(error, info) {\n      // Display fallback UI\n      this.setState({ hasError: true, errorInfo: info });\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        return <h1>Google Maps API has failed. Please check your connection and try again.</h1>;\n      }\n      return this.props.children;\n    }\n  }","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n//import SideBar from './SideBar';\nimport { slide as Menu } from 'react-burger-menu';\nimport ListItem from './ListItem';\nimport ErrorBoundary from './ErrorBoundary';\nimport escapeRegExp from 'escape-string-regexp'\n\nwindow.gm_authFailure = ()=>{alert(\"Please check your Google API key\")}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.map=null;\n  }\n\n  state = {\n    venues: [],\n    query: ''\n  }\n\n  showSettings (event) {\n    event.preventDefault();\n  }\n\n  //Render Map \n  //Life cycle event\n  componentDidMount() {\n    this.getVenues()\n  }\n\n  handleStateChange (state) {\n    this.setState({menuOpen: state.isOpen})  \n  }\n\n  updateQuery(query){\n    this.setState({query: query.trim() });\n  }\n\n  filterVenues(query) {\n    this.myVenue.marker.forEach(marker =>{\n      marker.name.toLowerCase().includes(query.toLowerCase()) === true ? \n      marker.setVisible(true) :\n      marker.setVisible(false);\n      //marker.setState({venues})\n    });\n    this.setState({query});\n\n  }\n\n  //**renderMap = loadMap\n\n  renderMap = () => {\n    try {\n    loadScript(\"https://maps.googleapis.com/maps/api/js?client=gme-nianticinc&callback=initMap\")\n    window.initMap = this.initMap\n  }\n  catch(err) {\nconsole.error(err)\n    alert('An error occured. Please check your google settings. ')\n  }\n  }\n\n  getVenues = () => {\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\"\n    const keys = {\n      client_id: \"02ONRBOTCO3H1QD0Y3U3ZL2V2BP1PYHPNXFQEXRAJOOIJHB1\",\n      client_secret: \"IP01UHEG5AKED10WFOJYIBXWN34SMOWIPAM2W3A421KTUAFN\",\n      query: \"hotel\",\n      near: \"Sydney\", \n      v: \"20181007\"\n    }\n\n    axios.get(endPoint + new URLSearchParams(keys))\n    .then(response => {\n      this.setState({\n        venues: response.data.response.groups[0].items\n      }, this.renderMap() )//callback function\n    })\n    .catch(error =>{\n      alert('Some error occurred while retrieving the data from Foursquare. Please check console for details')\n    })\n  }\n\n//handleItemClick=venues;\n\n  initMap = () => {\n\n    const markersArr=[];\n    this.setState({handleItemClick: this.state.venues});/**/\n    const scaledSize = new window.google.maps.Size(26, 43)\n     const redMarker = {url: 'https://maps.gstatic.com/mapfiles/api-3/images/spotlight-poi2_hdpi.png',\n            scaledSize\n          }\n          let greenMarker = {\n            url: 'https://www.google.com/mapfiles/marker_green.png',\n            //scaledSize\n          }\n    //Map Created\n        var map = new window.google.maps.Map(document.getElementById('map'), {\n          center: {lat: -33.783, lng: 151.177},\n          zoom: 11\n        })\n        this.map = map;\n\n\n        //Create an InfoWindow\n          var infowindow = new window.google.maps.InfoWindow({\n  });\n\n        //loop over our venues\n        //dynamic markers\n        this.state.venues.map(myVenue => {\n         const address = myVenue.venue.location.address ? \n         myVenue.venue.location.address : ''\n\n          var contentString = `<h3>${myVenue.venue.name} </h3>\n          <p>${address}</p>\n            \n            <p>${myVenue.venue.location.city} ${myVenue.venue.location.state} ${myVenue.venue.location.postalCode}</p>\n            <p><strong>\n        ${'<a href=\"https://foursquare.com/v/' +\n          myVenue.venue.id +\n          '\" target=\"_blank\">Learn More...</a>'}\n       </strong> </p>`\n            //<Img src=linkvar/>`\n\n          //Create markers\n           myVenue.marker = new window.google.maps.Marker({\n    position: {lat: myVenue.venue.location.lat, lng: myVenue.venue.location.lng},\n    map: map, \n    title: myVenue.venue.name,\n    id: myVenue.venue.id,\n    scaledSize,//marker size matches default size\n\n    animation: window.google.maps.Animation.DROP\n  });\n           myVenue.marker.isOpen = false;\n           markersArr.push(myVenue);\n\n          //Link marker and infowindow together\n          myVenue.marker.addListener('click', function() {\n            //Change the content\n            infowindow.setContent(contentString);\n            console.log(myVenue.marker);\n\n            markersArr.forEach(venue => {\n              console.log(venue);\n              venue.isOpen = false;\n              venue.marker.setIcon(redMarker);\n            });\n\n              //Markers switch color when another marker is selected. \n              myVenue.marker.isOpen = true\n              //console.log(myVenue.marker.isOpen)\n              myVenue.marker.setIcon(greenMarker);\n              myVenue.marker.setZIndex(9999);\n\n            //open an infowindow\n            \n            infowindow.open(map, myVenue.marker);\n          });\n\n          return myVenue.marker;\n       });\n\n      window.google.maps.event.addListener(infowindow, \"closeclick\", ()=>\n        {\n          this.state.venues.forEach(venue => {\n            venue.isOpen = false;\n            venue.marker.setIcon(redMarker);\n          });\n        });\n\n       window.google.maps.event.addListener(infowindow, \"click\", ()=>\n        {\n          this.state.venues.forEach(venue => {\n            infowindow.close();\n            venue.isOpen = false;\n            venue.marker.setIcon(redMarker);\n          });\n        });     \n      };\n\n//NOTES*****\n//There seems to be undefined in one of the venues' address\n\n  render() {\n\n    const { venues, query } = this.state\n    //console.log(venues)\n\n    let filteredVenues\n    if(query) {\n      const match = new RegExp(escapeRegExp(query), 'i')\n      filteredVenues = venues.filter((venue)=> {\n        const isMatch = match.test(venue.venue.name);\n        console.log(venue);\n        if (isMatch) {\n          venue.marker.setMap(this.map);\n        } else {\n          venue.marker.setMap(null);\n        }\n        return isMatch;\n      \n        //match.test(venue.venue.name))\n      //}\n    });} else {\n      filteredVenues = venues\n    }\n\n    return (\n      \n\n      \n \n  \n    <div id=\"App\">\n    \n    <ErrorBoundary>\n<Menu tabIndex=\"0\">\n<input type={\"search\"} id={\"search\"} placeholder={\"filter Venues\"} \nonChange={(event)=> this.updateQuery(event.target.value)} \naria-label = \"Search Venues\"  tabIndex = \"0\" role=\"search\"/>\n              \n                {filteredVenues.map((venue, index) => (\n                  <ListItem \n                    className=\"bm-item\"\n                    key={index}\n                    venue={venue}\n                    aria-label = {venue.venue.name}\n                    \n                    />\n                    \n                ))}\n                </Menu>\n                </ErrorBoundary>\n      <div id=\"map\"></div>\n      \n      </div>\n      \n      \n  \n\n\n    );\n  }\n}\n\n\n\n\nfunction loadScript(url) {\n  var index = window.document.getElementsByTagName(\"script\")[0]\n  var script = window.document.createElement(\"script\")\n  script.src = url\n  script.async = true\n  script.defer = true\n  index.parentNode.insertBefore(script, index)\n\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}